/*
github.com/tcrain/cons - Experimental project for testing and scaling consensus algorithms.
Copyright (C) 2020 The project authors - tcrain

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/
package cons

import (
	"github.com/tcrain/cons/config"
	"github.com/tcrain/cons/consensus/types"
)

// RndTestConfig is a list of different configurations that will be tested for randomized consensus.
var RndTestConfigs = []types.TestOptions{

	//////////////////////////// All to all Nw tests ////////////////////////////
	{ // No fails, use pub index
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},

	{ // No fails, use pub index, rotate cord
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		RotateCord:         true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // No fails, allow concurrent
		MaxRounds:          config.MaxRounds,
		AllowConcurrent:    5,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // No fails, include proofs
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		IncludeProofs:      true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // No fails TBLS sigs
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		SigType:            types.TBLS,
		IncludeProofs:      true,
		UsePubIndex:        true,
		GenRandBytes:       true,
	},
	/*	{ // No fails, some members that dont participate in cons // TODO
			MaxRounds:          config.MaxRounds,
			FailRounds:         0,
			NumFailProcs:       0,
			NumTotalProcs:      config.ProcCount,
			NumNonMembers:      config.NonMembers,
			ClearDiskOnRestart: false,
			NetworkType:        types.AllToAll,
			CheckDecisions:     true,
			UsePubIndex:        true,
			SigType: types.EDCOIN,
		},
	*/{ // Msg drops, make this a short test
		// MaxRounds:          config.MaxRounds,
		MaxRounds:          10,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		MsgDropPercent:     10,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // No fails memory storage
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		StorageType:        types.Memstorage,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // All fail on round 5, and restart from disk
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // 5 fail on round 5, and restart from disk
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       5,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // 5 fail on round 5, and restart from disk, long test
		MaxRounds:          100,
		FailRounds:         5,
		NumFailProcs:       5,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Allow concurrent, and have a failure
		MaxRounds:          config.MaxRounds,
		AllowConcurrent:    5,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount / 3,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // 1/3 fail on round 5, and restart with blank state
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount / 3,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: true,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},

	{ // All fail on round 5, and restart from disk (TBLS)
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		SigType:            types.TBLS,
		IncludeProofs:      true,
		UsePubIndex:        true,
	},
	{ // 1/3 on round 5, and restart with empty state (TBLS)
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount / 3,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: true,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		SigType:            types.TBLS,
		IncludeProofs:      true,
		UsePubIndex:        true,
	},

	// //////////////////// Peer to peer (gossip) Nw tests ////////////////////////////

	{ // No fails, use pub index
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // No fails, include proofs
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Msg drops, make this a short test
		MaxRounds:          5,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		MsgDropPercent:     10,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // All fail on round 5, and restart from disk
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // 5 fail on round 5, and restart from disk
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       5,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // 1/3 fail on round 5, and restart with blank state
		MaxRounds:          config.MaxRounds,
		FailRounds:         5,
		NumFailProcs:       config.ProcCount / 3,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: true,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
}

// TestRandomConfigs is a list of test configurations for radomized network propagation.
var RndTestRandomConfigs = []types.TestOptions{
	{ // No fails
		MaxRounds:          config.MaxRounds,
		FailRounds:         0,
		NumFailProcs:       0,
		NumTotalProcs:      config.ProcCount,
		ClearDiskOnRestart: false,
		FanOut:             config.FanOut,
		NetworkType:        types.Random,
		CheckDecisions:     true,
		SleepValidate:      true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
}

// TestByzConfigs is a list of test configuarions using Byzantine nodes.
var RndTestByzConfigs = []types.TestOptions{
	{ // No fails
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.NonFaulty,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Mute
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.Mute,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Mute with rotate coord
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.Mute,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		RotateCord:         true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Flip bin
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.BinaryFlip,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Both bin
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.BinaryBoth,
		ClearDiskOnRestart: false,
		NetworkType:        types.AllToAll,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},

	{ // Both bin p2p
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.BinaryBoth,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
	{ // Both bin w/proofs
		MaxRounds:          config.MaxRounds,
		NumTotalProcs:      config.ProcCount,
		NumByz:             config.ProcCount / 3,
		ByzType:            types.BinaryBoth,
		ClearDiskOnRestart: false,
		NetworkType:        types.P2p,
		FanOut:             config.FanOut,
		CheckDecisions:     true,
		IncludeProofs:      true,
		UsePubIndex:        true,
		SigType:            types.EDCOIN,
	},
}
